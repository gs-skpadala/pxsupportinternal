{"ast":null,"code":"var _jsxFileName = \"/Users/skpadala/Desktop/pxsupportinternal/pxsupportinternal/src/components/LoginForm.js\",\n  _s = $RefreshSig$();\n// components/LoginForm.js\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './LoginForm.css'; // Import the CSS file for the login form styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginForm = ({\n  setIsLoggedIn\n}) => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const navigate = useNavigate();\n  const handleLogin = () => {\n    // Here, you would perform actual authentication logic\n    // For simplicity, I'm just checking if both username and password are non-empty\n    if (username.trim() !== '' && password.trim() !== '') {\n      setIsLoggedIn(true);\n      window.aptrinsic(\"identify\", {\n        \"id\": \"skpadala@gainsight.com\",\n        \"email\": \"skpadala@gainsight.com\",\n        \"firstName\": \"Padala\",\n        \"lastName\": \"Sai\"\n      }, {\n        \"id\": \"12345\",\n        \"name\": \"BMW\"\n      });\n      navigate('/');\n    }\n  };\n\n  // Add animation when the component mounts\n  useEffect(() => {\n    const formContainer = document.querySelector('.login-form-container');\n    formContainer.classList.add('visible');\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"login-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginForm, \"QC0cStVpEbT25lI8lwUl3n1iakY=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginForm;\nexport default LoginForm;\n\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// const LoginForm = ({ setIsLoggedIn }) => {\n//   const [username, setUsername] = useState('');\n//   const [password, setPassword] = useState('');\n//   const navigate = useNavigate();\n\n//   const handleLogin = () => {\n//     // Here, you would perform actual authentication logic\n//     // For simplicity, I'm just checking if both username and password are non-empty\n//     if (username.trim() !== '' && password.trim() !== '') {\n//       setIsLoggedIn(true);\n//       navigate('/');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Login Page</h2>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Username\"\n//         value={username}\n//         onChange={(e) => setUsername(e.target.value)}\n//       />\n//       <input\n//         type=\"password\"\n//         placeholder=\"Password\"\n//         value={password}\n//         onChange={(e) => setPassword(e.target.value)}\n//       />\n//       <button onClick={handleLogin}>Login</button>\n//     </div>\n//   );\n// };\n\n// export default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","LoginForm","setIsLoggedIn","_s","username","setUsername","password","setPassword","navigate","handleLogin","trim","window","aptrinsic","formContainer","document","querySelector","classList","add","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/skpadala/Desktop/pxsupportinternal/pxsupportinternal/src/components/LoginForm.js"],"sourcesContent":["// components/LoginForm.js\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './LoginForm.css'; // Import the CSS file for the login form styles\n\nconst LoginForm = ({ setIsLoggedIn }) => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const navigate = useNavigate();\n\n  const handleLogin = () => {\n    // Here, you would perform actual authentication logic\n    // For simplicity, I'm just checking if both username and password are non-empty\n    if (username.trim() !== '' && password.trim() !== '') {\n      setIsLoggedIn(true);  \n\n      window.aptrinsic(\"identify\", {\n        \"id\": \"skpadala@gainsight.com\",\n        \"email\": \"skpadala@gainsight.com\",\n        \"firstName\": \"Padala\",\n        \"lastName\": \"Sai\"\n      }, {\n        \"id\": \"12345\",\n        \"name\": \"BMW\"\n      }); \n\n      navigate('/');\n    }\n  };\n\n  \n  // Add animation when the component mounts\n  useEffect(() => {\n    const formContainer = document.querySelector('.login-form-container');\n    formContainer.classList.add('visible');\n  }, []);\n\n  return (\n    <div className=\"login-form-container\">\n      <h2>Login</h2>\n      <form className=\"login-form\">\n        <input\n          type=\"text\"\n          placeholder=\"Username\"\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <button onClick={handleLogin}>Login</button>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n\n\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// const LoginForm = ({ setIsLoggedIn }) => {\n//   const [username, setUsername] = useState('');\n//   const [password, setPassword] = useState('');\n//   const navigate = useNavigate();\n\n//   const handleLogin = () => {\n//     // Here, you would perform actual authentication logic\n//     // For simplicity, I'm just checking if both username and password are non-empty\n//     if (username.trim() !== '' && password.trim() !== '') {\n//       setIsLoggedIn(true);\n//       navigate('/');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Login Page</h2>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Username\"\n//         value={username}\n//         onChange={(e) => setUsername(e.target.value)}\n//       />\n//       <input\n//         type=\"password\"\n//         placeholder=\"Password\"\n//         value={password}\n//         onChange={(e) => setPassword(e.target.value)}\n//       />\n//       <button onClick={handleLogin}>Login</button>\n//     </div>\n//   );\n// };\n\n// export default LoginForm;\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}